server {

    server_name vpn9.conet.network;
        root /var/www/vpn;
        index loader.html;
            # --- 全局 CORS 標頭設定 ---
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept' always;

        # --- **修正點：更新內容安全策略 (CSP)** ---
        # 在 script-src 指令中加入了 'unsafe-eval'。
        # 這將允許您的 React 應用程式使用 eval() 或類似的功能，解決您在主控台中看到的錯誤。
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; worker-src 'self';" always;


         # --- 核心邏輯：攔截根目錄請求 ---
        location = / {
            types { }
            default_type text/html;

            # 使用更健壯的 JavaScript 邏輯，確保在 SW 準備好後再導航
            return 200 '<!DOCTYPE html><html><head><title>SW Loader</title></head><body><script>
                if ("serviceWorker" in navigator) {
                    navigator.serviceWorker.register("/loader.js")
                        .then(registration => {
                            console.log("Service Worker registration successful, scope is:", registration.scope);
                            return navigator.serviceWorker.ready;
                        })
                        .then(readyRegistration => {
                            console.log("Service Worker is active and ready to control the page.");
                            window.location.href = "/index.html";
                        })
                        .catch(error => {
                            console.error("Service Worker registration failed:", error);
                        });
                } else {
                    console.log("Service Worker is not supported.");
                }
            </script></body></html>';
        }

        # --- 為 loader.js 設定正確的 Content-Type ---
        location = /loader.js {
            types { }
            default_type application/javascript;
            try_files $uri =404;
        }
        location = /service-worker.js {
            types { }
            default_type application/javascript;
            try_files $uri =404;
        }


    
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/affiliate-test.silentpass.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/affiliate-test.silentpass.io/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

} 