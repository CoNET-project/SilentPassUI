# ------------------------------------------------------------------
# 伺服器區塊 (最佳實踐)：將所有 HTTP 請求重定向到 HTTPS
# ------------------------------------------------------------------
server {
    listen 80;
    # 匹配您的伺服器名稱
    server_name ios-test.silentpass.io;

    # 將所有 HTTP 請求以 301 永久重定向的方式轉發到 HTTPS。
    return 301 https://$host$request_uri;
}


# ------------------------------------------------------------------
# Nginx 伺服器設定範例
# 更新了內容安全策略 (CSP) 以允許 'unsafe-eval'
# ------------------------------------------------------------------
server {
    # 監聽 443 埠，處理 HTTPS 請求
    listen 443 ssl http2;

    # 您的網域名稱
    server_name ios-test.silentpass.io;

    # 網站檔案的根目錄
    root /var/www/ios-test;

    # --- SSL/TLS 憑證設定 (由 Certbot 管理) ---
    ssl_certificate /etc/letsencrypt/live/affiliate-test.silentpass.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/affiliate-test.silentpass.io/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # --- 全局 CORS 標頭設定 ---
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept' always;

    # --- **修正點：更新內容安全策略 (CSP)** ---
    # 在 script-src 指令中加入了 'unsafe-eval'。
    # 這將允許您的 React 應用程式使用 eval() 或類似的功能，解決您在主控台中看到的錯誤。
    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; worker-src 'self';" always;


    # 對於預檢 (preflight) 的 OPTIONS 請求，直接返回 204 No Content
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # --- 核心邏輯：攔截根目錄請求 ---
    location = / {
        types { }
        default_type text/html;

        # 使用更健壯的 JavaScript 邏輯，確保在 SW 準備好後再導航
        return 200 '<!DOCTYPE html><html><head><title>SW Loader</title></head><body><script>
            if ("serviceWorker" in navigator) {
                navigator.serviceWorker.register("/loader.js")
                    .then(registration => {
                        console.log("Service Worker registration successful, scope is:", registration.scope);
                        return navigator.serviceWorker.ready;
                    })
                    .then(readyRegistration => {
                        console.log("Service Worker is active and ready to control the page.");
                        window.location.href = "/index.html";
                    })
                    .catch(error => {
                        console.error("Service Worker registration failed:", error);
                    });
            } else {
                console.log("Service Worker is not supported.");
            }
        </script></body></html>';
    }

    # --- 為 loader.js 設定正確的 Content-Type ---
    location = /loader.js {
        types { }
        default_type application/javascript;
        try_files $uri =404;
    }
    
    # --- 處理其他所有檔案請求 ---
    location / {
        try_files $uri $uri/ =404;
    }
}
